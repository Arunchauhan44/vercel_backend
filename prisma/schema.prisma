// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  name           String     @default("")
  email          String     @unique // Mark email as unique
  password       String     @default("")
  confirmPasword String     @default("")
  role           String     @default("user") // user, admin
  otp            String     @default("") // field to store otp
  otpExpires     DateTime?
  Cart           Cart[]
  Order          Order[]
  wishlist       wishlist[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  image       String?    @default("")
  category    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Cart        Cart[]
  wishlist    wishlist[]
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  totalAmount Float
  status      String   @default("pending") // pending, processing, shipped, delivered, cancelled
  paymentId   String? // For payment gateway reference
  address     String // Shipping address
  phone       String // Contact phone
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model blackListedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
}
